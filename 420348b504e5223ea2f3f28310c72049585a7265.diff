diff --git a/ConsoleApp.sln b/ConsoleApp.sln
index 4ac17d0..aeb478b 100644
--- a/ConsoleApp.sln
+++ b/ConsoleApp.sln
@@ -1,7 +1,7 @@
 ﻿
 Microsoft Visual Studio Solution File, Format Version 12.00
-# Visual Studio Version 17
-VisualStudioVersion = 17.2.32602.215
+# Visual Studio Version 16
+VisualStudioVersion = 16.0.33214.272
 MinimumVisualStudioVersion = 10.0.40219.1
 Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "ConsoleApp", "ConsoleApp\ConsoleApp.csproj", "{D0836625-FD9E-416A-89C4-658E3255B44B}"
 EndProject
diff --git a/ConsoleApp/DataReader.cs b/ConsoleApp/DataReader.cs
index 0d020fa..f014865 100644
--- a/ConsoleApp/DataReader.cs
+++ b/ConsoleApp/DataReader.cs
@@ -1,53 +1,50 @@
```
usuwaj niepotzrebne biblioteki 
```
-﻿namespace ConsoleApp
-{
-    using System;
-    using System.Collections.Generic;
-    using System.Text;
-    using System.IO;
-    using System.Linq;
-    using System.Threading.Tasks;
+﻿using System;
+using System.Collections.Generic;
+using System.IO;
+using System.Linq;
 
+namespace ConsoleApp
+{
     public class DataReader
     {
         IEnumerable<ImportedObject> ImportedObjects;
 
-        public void ImportAndPrintData(string fileToImport, bool printData = true)
+        public void ImportAndPrintData(string fileToImport)
         {
-            ImportedObjects = new List<ImportedObject>() { new ImportedObject() };
+            ImportedObjects = new List<ImportedObject>() { 
+                new ImportedObject() };
 
             var streamReader = new StreamReader(fileToImport);
 
-            var importedLines = new List<string>();
             while (!streamReader.EndOfStream)
             {
-                var line = streamReader.ReadLine();
-                importedLines.Add(line);
-            }
+                string line = streamReader.ReadLine();
+                var values = line.Split(';');
+                // check if line is correct, must include 7 columns
+                if (values.Count() == 7)
+                {
+                    if (ClearImportedData(values[0]) == null)
+                    {
+                        Console.WriteLine("Error");
+                    }
```
ograniczamy liczbę iteracji po zbiorze danych do niezbędnego minimum
parsowanie danych moża wykonać już podczas wczytywania
```
-            for (int i = 0; i <= importedLines.Count; i++)
-            {
-                var importedLine = importedLines[i];
-                var values = importedLine.Split(';');
-                var importedObject = new ImportedObject();
-                importedObject.Type = values[0];
-                importedObject.Name = values[1];
-                importedObject.Schema = values[2];
-                importedObject.ParentName = values[3];
-                importedObject.ParentType = values[4];
-                importedObject.DataType = values[5];
-                importedObject.IsNullable = values[6];
-                ((List<ImportedObject>)ImportedObjects).Add(importedObject);
+                    var importedObject = new ImportedObject
+                    {
+                        Type = ClearImportedData(values[0]).ToUpper(),
+                        Name = ClearImportedData(values[1]),
+                        Schema = ClearImportedData(values[2]),
+                        ParentName = ClearImportedData(values[3]),
+                        ParentType = ClearImportedData(values[4]).ToUpper(),
+                        DataType = ClearImportedData(values[5]).ToUpper(),
+                        IsNullable = ClearImportedData(values[6])
+                    };
+                    ((List<ImportedObject>)ImportedObjects).Add(importedObject);
+                }
             }
```
trudny do czytania i zarządzanie sposób parsowania
wiele operacji się powtarza, lepiej napisać dedykowaną metodę: ClearImportedData
```
-            // clear and correct imported data
-            foreach (var importedObject in ImportedObjects)
-            {
-                importedObject.Type = importedObject.Type.Trim().Replace(" ", "").Replace(Environment.NewLine, "").ToUpper();
-                importedObject.Name = importedObject.Name.Trim().Replace(" ", "").Replace(Environment.NewLine, "");
-                importedObject.Schema = importedObject.Schema.Trim().Replace(" ", "").Replace(Environment.NewLine, "");
-                importedObject.ParentName = importedObject.ParentName.Trim().Replace(" ", "").Replace(Environment.NewLine, "");
-                importedObject.ParentType = importedObject.ParentType.Trim().Replace(" ", "").Replace(Environment.NewLine, "");
-            }
+            // clear imported data - remove nullable rows and header
+            ImportedObjects = ImportedObjects.Where(o => o.Type != null 
+                && o.Type != "TYPE").ToList();
 
             // assign number of children
             for (int i = 0; i < ImportedObjects.Count(); i++)
@@ -59,7 +56,8 @@ public void ImportAndPrintData(string fileToImport, bool printData = true)
                     {
                         if (impObj.ParentName == importedObject.Name)
                         {
-                            importedObject.NumberOfChildren = 1 + importedObject.NumberOfChildren;
+                            importedObject.NumberOfChildren = 1 
+                                + importedObject.NumberOfChildren;
                         }
                     }
                 }
@@ -69,21 +67,24 @@ public void ImportAndPrintData(string fileToImport, bool printData = true)
             {
                 if (database.Type == "DATABASE")
                 {
-                    Console.WriteLine($"Database '{database.Name}' ({database.NumberOfChildren} tables)");
+                    Console.WriteLine($"Database '{database.Name}' (" +
+                        $"{database.NumberOfChildren} tables)");
 
                     // print all database's tables
                     foreach (var table in ImportedObjects)
```
staraj się standaryzować dane, modyfikatory jak ToUpper w warunkach
może powodować problemy z zarządzaniem i debugowaniem kodem
```
-                    {
-                        if (table.ParentType.ToUpper() == database.Type)
+                    {                        
+                        if (table.ParentType == database.Type)
                         {
                             if (table.ParentName == database.Name)
                             {
```
skróciłem długość linii do 80 w celu łatwiejszego przeglądania kod w git
```
-                                Console.WriteLine($"\tTable '{table.Schema}.{table.Name}' ({table.NumberOfChildren} columns)");
+                                Console.WriteLine($"\tTable '{table.Schema}." +
+                                    $"{table.Name}' ({table.NumberOfChildren} " +
+                                    $"columns)");
 
                                 // print all table's columns
                                 foreach (var column in ImportedObjects)
                                 {
-                                    if (column.ParentType.ToUpper() == table.Type)
+                                    if (column.ParentType == table.Type)
                                     {
                                         if (column.ParentName == table.Name)
                                         {
@@ -96,30 +97,37 @@ public void ImportAndPrintData(string fileToImport, bool printData = true)
                     }
                 }
             }
+        }
```
dodanie metody do parsowania danych ułatwia
zarządzanie parsowaniem
```
+
+        /// <summary>
+        /// Clear imported string
+        /// </summary>
+        /// <param name="value"></param>
+        /// <returns></returns>
+        private string ClearImportedData(string value)
+        {
+           Regex rgx = new Regex(@"[\s\t\n\r(.*:)]");
+            
+           sValue = rgx.Replace(sValue, "");
-           Console.ReadLine(); 
+           //value = value.Trim().Length != 0 ? value.Trim().Replace(" ", "").
+           //    Replace(Environment.NewLine, "") : "";
 
+           return value;
         }
     }
```
staraj się pisać czysty jednolity kod
trzymaj się jednego standardu
```
     class ImportedObject : ImportedObjectBaseClass
     {
-        public string Name
-        {
-            get;
-            set;
-        }
-        public string Schema;
+        public string Schema { get; set; }
 
-        public string ParentName;
-        public string ParentType
-        {
-            get; set;
-        }
+        public string ParentName { get; set; }
+        
+        public string ParentType { get; set; }
 
         public string DataType { get; set; }
         public string IsNullable { get; set; }
 
-        public double NumberOfChildren;
+        public double NumberOfChildren { get; set; }
     }
 
     class ImportedObjectBaseClass
diff --git a/ConsoleApp/Program.cs b/ConsoleApp/Program.cs
index 67130d4..a2750c7 100644
--- a/ConsoleApp/Program.cs
+++ b/ConsoleApp/Program.cs
@@ -1,18 +1,23 @@
```
niedodawaj nieużywanych bibliotek
```
-﻿namespace ConsoleApp
-{
-    using System;
-    using System.Collections.Generic;
-    using System.IO;
-    using System.Linq;
-    using System.Text;
-    using System.Threading.Tasks;
+﻿using System;
 
+namespace ConsoleApp
+{
     internal class Program
     {
         static void Main(string[] args)
         {
```
nie umieszaj w kodzie statycznych nazw plików
lepiej podać plik jako parametr do programu
tu również pojawił się błąd w nazwie
```
-            var reader = new DataReader();
-            reader.ImportAndPrintData("dataa.csv");
+
+            if (args.Length == 0)
+            {
+                Console.WriteLine("Add csv file as parameter");
+                Console.WriteLine(">ConsoleApp.exe data.csv");
+            }
+            else
+            {
+                var reader = new DataReader();
+                //reader.ImportAndPrintData("../../data.csv");
+                reader.ImportAndPrintData(args[0]);
+            }
         }
     }
 }
